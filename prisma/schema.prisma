// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  passwordExpiresAt DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  role              Role      @default(USER)

  cart  Cart[]
  order Order[]

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Role
enum Role {
  USER
  ADMIN
}

//Cart, CartItem
model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  productId String @db.ObjectId
  cartId    String @db.ObjectId

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cartItems")
}

model Cart {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  itemsTotal Float
  subTotal   Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  items CartItem[]

  @@unique([userId])
  @@map("carts")
}

//Order, Delivery
type Delivery {
  phoneNumber     String?
  city            String?
  streetName      String?
  houseNumber     Int?
  additionNumber  String?
  zipCode         String?
  logisticCompany String?
  department      String?
  typeOfDelivery  String?
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  Address   Delivery
  count     Int
  sum       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  @@map("orders")
}

// Product, Image
type Image {
  url String
}

type Group {
  ingredients    String
  specification  String
  shelfLife      String
  category       String
  NEW            Boolean
  HIT            Boolean
  name           String
  UTP            String
  description    String
  useTo          String
  linkName       String
  tradeMarkImage String

  image Image[]
}

model Product {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  volume         String
  article        String
  stock          Boolean
  discount_price Float   @default(0)
  original_price Float   @default(0)
  current_rating Float

  image    Image[]
  group    Group[]
  cartItem CartItem[]

  @@map("products")
}
